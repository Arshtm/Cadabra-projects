{
	"cell_id": 862531085534105402,
	"cells": [
		{
			"cell_id": 6952436960393603390,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,q,r,s,u,v,w,x,y,z#}::Indices(full,values={t,x,y}, position=independent).\n\\partial{#}::PartialDerivative.\n\\nabla{#}::Derivative.\n{\\nabla{#},\\partial{#}}::Commuting.\nh_{m? n?}::Metric.\nh^{m? n?}::InverseMetric.\nh_{m? n?}::Symmetric.\nh^{m? n?}::Symmetric.\ndelh_{m? n?}::Symmetric.\ndelh^{m? n?}::Symmetric.\n\\Gamma^{m}_{n q}::TableauSymmetry(shape={2}, indices={1,2}).\nG3_{m? n?}::Symmetric.\nDh::Depends(\\partial{#}).\n\\delta^{m?}_{n?}::KroneckerDelta.\n\\delta_{m?}^{n?}::KroneckerDelta.\nF_{m? n?}::AntiSymmetric."
		},
		{
			"cell_id": 15981112270443859697,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "p::LaTeXForm(\"\\pi\").\nG4p::LaTeXForm(\"G_{4\\pi}\").\nG4X::LaTeXForm(\"G_{4X}\").\nG4XX::LaTeXForm(\"G_{4XX}\").\nG4Xp::LaTeXForm(\"G_{4\\pi X}\").\npi2::LaTeXForm(\"\\pi^{m n}\\pi_{m n}\").\t\nboxpi4::LaTeXForm(\"\\Box^{(4)}{\\pi}\").\ndelboxpi4::LaTeXForm(\"\\delta\\Box^{(4)}{\\pi}\").\npi24::LaTeXForm(\"\\pi^{\\mu \\nu}\\pi_{\\mu \\nu}\").\nmathcalG{#}::LaTeXForm(\"\\mathcal{G}\").\nmathcalP{#}::LaTeXForm(\"\\mathcal{P}\").\nmathcalA{#}::LaTeXForm(\"\\mathcal{A}\").\nmathcalphi{#}::LaTeXForm(\"\\Phi\")."
		},
		{
			"cell_id": 12865507769665094275,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "#Эта функция \"прибирает\" выражение - раскрывает скобки, раскрывает производные и приводит к каноническому виду до тех пор, пока выражение не перестанет изменяться\ndef tidy (expr):\n   converge(expr):\n       distribute(expr)\n       product_rule(expr)\n       canonicalise(expr)\n   return expr"
		},
		{
			"cell_id": 8122226354943683683,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "#Эта функция разбивает индексы на 3 + 1 и применяет цилиндрическое условие для четвертой координаты\ndef split(ex):\n\tsplit_index(ex, $\\mu, m1, 4$, repeat=True)\n\tsubstitute(ex, $\\partial_{4}{A??} -> 0$, repeat=True)\n\tsubstitute(ex, $\\partial_{4 m?}{A??} -> 0$, repeat=True)\n\tsubstitute(ex, $\\partial_{m? 4}{A??} -> 0$, repeat=True)\n\tcanonicalise(ex)\n\treturn ex"
		},
		{
			"cell_id": 5842869526328321304,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "# Эта функция просто выбирает незанятый индекс для того, чтобы использовать его в качестве немого в ковариантной производной\ndef select_index(used_indices):\n\tindeces = r'z y x w v u t s r q o n m l k j i h g f e d c b a'.split() \n\tfor uind in indeces:\n\t\tfound = False\n\t\tfor qind in used_indices:\n\t\t\tif qind == uind:\n\t\t\t\tfound = True\n\t\t\t\tbreak\t\n\t\tif not found:\n\t\t\tused_indices.add(uind)\n\t\t\tindex = uind\n\t\t\tbreak\t\n\treturn Ex(index), used_indices"
		},
		{
			"cell_id": 3139226686227207264,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "#Эта функция умеет брать одну ковариантную производную\ndef one_nabla(ex, used_indices): #На вход подается выражение без лишних множителей, только набла, и список уже занятых индексов\n\t#print('I am in one nabla')\n\tt3, used_indices = select_index(used_indices)# здесь выбирается значок и обновляется список занятых индексов\n\tfree = dict()# словарь тензорных значков выражения\n\tfree['sub'] = set()\n\tfree['up'] = set()# множества верхних и нижних свободных значков\n\tfor nabla in ex[r'\\nabla']:\n\t\tnabla.name=r'\\partial' #меняем наблу на частную производную\n\t\tdindex = nabla.indices().__next__() #выбираем индекс стоящий у самой наблы\n\t\tfor arg in nabla.args():             # обращаемся к аргументу производной, он один, но лучше цикл все-таки оборвать\n\t\t\tret:=0;\n\t\t\tfor index in arg.free_indices(): #собираем в словарь все свободные индексы\n\t\t\t\tif index.parent_rel==sub:\n\t\t\t\t\tfree['sub'].add(str(index.ex()))\n\t\t\t\telse:\n\t\t\t\t\tfree['up'].add(str(index.ex()))\n\t\t\tfor key in free.keys(): # проходим по верхним и нижним индексам по-отдельности\n\t\t\t\tfor index in free[key]:\n\t\t\t\t\tind = Ex(index)\n\t\t\t\t\tif key == 'sub': #Строим подходящий символ Кристоффеля\n\t\t\t\t\t\tt1:= -\\Gamma^{@[t3]}_{@(dindex) @[ind]};\n\t\t\t\t\telse:\n\t\t\t\t\t\tt1:=  \\Gamma^{@[ind]}_{@(dindex) @[t3]};\n\t\t\t\t\tt2:= @[arg];\n\t\t\t\t\tfor term_index in arg.free_indices(): # важное место!! тут мы проходимся по всем свободным индексам выражения и меняем одновременно все, что совпадают с индексом из словаря\n\t\t\t\t\t\tif str(term_index.ex()) == index:\n\t\t\t\t\t\t\tif term_index.parent_rel==sub:\n\t\t\t\t\t\t\t\tt2[term_index]:= _{@[t3]};\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tt2[term_index]:= ^{@[t3]};\n\t\t\t\t\tret += Ex(str(nabla.multiplier)) * t1 * t2 # строим слагаемое с Гаммой\n\t\t\tnabla += ret # и прибавляем его к набле, которая уже стала частной производной, важно, что nabla является узлом дерева и имеет тип ExNode, его мы можем заменить в отличии от аргумента наблы\n\t\t\tbreak\n\t\tbreak\n\treturn ex, used_indices"
		},
		{
			"cell_id": 3687019052109990682,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "#Эта функция анализирует пришедшее к ней слагаемое из стартовой функции, а так же является рекурсией на случай, если выражение достаточно сложное и разбивается на множители, которые так же являются слагаемыми и т.д.\ndef nabla_calculation(ex, used_indices, count): # на вход поступает выражение, список использованных индексов и число набл в выражении, без учета того вложенные они или перемножаются\n\t#print('I am in nabla calculation ', ex)\n\tex = ex.ex()\n\tfor element in ex.top().terms(): # разбиваем выражение на слагаемые\n\t\tnew:=1;\n\t\tlocal_count = 0\n\t\tfor nabla in element[r'\\nabla']: #пересчитываем наблы в каждом слагаемом\n\t\t\tlocal_count += 1\n\t\t#print(f'local count of {str(element)} ', local_count)\n\t\tif local_count == 0: #если их нет, то отпускаем с миром\n\t\t\t#print('There is no nabla in this element', element)\n\t\t\tcontinue\n\t\telif local_count == 1: # если одна, то отправляем ее раскрываться, в one_nabla можно отправлять все слагаемое, т.к. она замещает точечно узел \\nabla\n\t\t\tnew, used_indices = (one_nabla(element, used_indices))\n\t\t\telement.replace(new.ex())\n\t\t\t#print('There was one nabla in this element. I have unwraped it and I have got', element)\n\t\t\tcount -= 1\n\t\telse: #если больше одной, то проверяем произведение перед нами или нет\n\t\t\tif element.ex().top().name == r'\\prod': # если произведение, то разбиваем его на 2 множителя (иначе произведение начинает так же раскрываться рекурсивно) и считаем наблы в них\n\t\t\t\ti = 0\n\t\t\t\twhile i < 2:\n\t\t\t\t\tfor mult in element.ex().top().children():\n\t\t\t\t\t\t#print('mult is ', mult)\n\t\t\t\t\t\tlocal_count2 = 0\n\t\t\t\t\t\tfor nabla in mult[r'\\nabla']:\n\t\t\t\t\t\t\tlocal_count2 += 1\n\t\t\t\t\t\t#print(f'local count of {str(mult)} ', local_count2)\n\t\t\t\t\t\tif local_count2 == 0:\n\t\t\t\t\t\t\t#print('There is no nabla, mult is ', mult)\n\t\t\t\t\t\t\tnew *= mult.ex()\n\t\t\t\t\t\telif local_count2 == 1: # если есть 1 набла, мы ее раскрываем\n\t\t\t\t\t\t\tfor nabla in mult[r'\\nabla']:\n\t\t\t\t\t\t\t\tnabla1, used_indices = one_nabla(nabla, used_indices)\n\t\t\t\t\t\t\t\tnabla.replace(nabla1.ex())\n\t\t\t\t\t\t\t\t#print('I unwraped one nabla', nabla)\n\t\t\t\t\t\t\t\tnew *= nabla.ex()\n\t\t\t\t\t\t\t#print('I unwraped one nabla in product and now i have', new)\n\t\t\t\t\t\telse:  #если больше, то отправляем на повторный анализ в рекурсию\n\t\t\t\t\t\t\t#print('That crap needs another circle')\n\t\t\t\t\t\t\tmult1, used_indices = nabla_calculation(mult, used_indices, local_count)\n\t\t\t\t\t\t\tnew *= mult1\n\t\t\t\t\t\t\t#print(f'I get out of the recurtion step and I bring {str(new)} from that.')\n\t\t\t\t\t\ti+=1\n\t\t\t\tnew *= Ex(str(element.multiplier))\n\t\t\t\telement.replace(new)\t\t\t\t\n\t\t\telse: # если не произведение, то берем аргумент и отправляем его в рекурсию, выражение перестраиваем, т.к. заменять можно только узлы\n\t\t\t\tfor nabla in element[r'\\nabla']:\n\t\t\t\t\t#print(nabla)\n\t\t\t\t\tfor arg1 in nabla.args():\n\t\t\t\t\t\t#print('There was not any multiplication, but I still need another circle')\n\t\t\t\t\t\targ2, used_indices = nabla_calculation(arg1, used_indices, count - 1)\n\t\t\t\t\t\tindex = nabla.indices().__next__() \n\t\t\t\t\t\tt := \\nabla_{@(index)}{@[arg2]};\n\t\t\t\t\t\t#display(t)\n\t\t\t\t\tnew = t\n\t\t\t\t\t#print(f'I get out of the recurtion step and I bring {str(new)} from that.')\n\t\t\t\t\tnabla1, used_indices = one_nabla(new, used_indices)\n\t\t\t\t\tnew = Ex(str(nabla.multiplier)) * nabla1\n\t\t\t\t\tnabla.replace(new)\n\t\t\t\t\t#print(f'I unwraped last nabla here and I got', nabla)\n\t#print('It is the end of nabla_calculation, I have got ', ex)\n\treturn ex, used_indices"
		},
		{
			"cell_id": 6210540499683200558,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def expand_nabla(ex): #Основная входная функция, проверяет выражение на то, является ли оно равенством и разбивает его на слагаемые, по пути считает наблы\n\tif ex.top().name == '\\equals':\n\t\tfor child in ex.top().children():\n\t\t\t#print('Ive got a child ', child)\n\t\t\tret:=0;\n\t\t\tfor element in child.ex().top().terms():\n\t\t\t\t#print('Ive got an element ', element)\n\t\t\t\tcount = 0\n\t\t\t\tused_indices = set()\n\t\t\t\tfor nabla in element.ex()[r'\\nabla']:\n\t\t\t\t\tcount += 1\n\t\t\t\t#print(count)\n\t\t\t\tif count == 0:\n\t\t\t\t\tret += element.ex()\n\t\t\t\t\t#print('there was no nabla just ', element)\n\t\t#new_ex += element.ex()\n\t\t\t\telse:\n\t\t\t\t\tfor n in element.ex():\n\t\t\t\t\t\tfor index in n.indices():\n\t\t\t\t\t\t\tused_indices.add(str(index))\n\t\t\t\t\t\t#print(used_indices)\n\t\t#for nabla in element[r'\\nabla']:\n\t\t\t\t\t#print('I am sending element to nabla_calculation', element)\n\t\t\t\t\telement1, used_indices = nabla_calculation(element, used_indices, count)\n\t\t\t\t\t#print('Ive got this from nabla calculation', element1)\n\t\t\t\t\t#print(element1)\n\t\t\t\t\tret +=element1\n\t\t\t\t#element.replace(element1)\n\t\t\t\t#print(ret)\n\t\t\tchild.replace(ret)\n\t\t\t#print(child)\n\t\t\t#print('I am out of \"child circle\"')\n\telse:\n\t\tfor element in ex.top().terms():\n\t\t\t\tcount = 0\n\t\t\t\tused_indices = set()\n\t\t\t\tfor nabla in element.ex()[r'\\nabla']:\n\t\t\t\t\tcount += 1\n\t\t#print(count)\n\t\t\t\tif count == 0:\n\t\t\t\t\tpass\n\t\t#new_ex += element.ex()\n\t\t\t\telse:\n\t\t\t\t\tfor n in element.ex():\n\t\t\t\t\t\tfor index in n.indices():\n\t\t\t\t\t\t\tused_indices.add(str(index))\n\t\t#for nabla in element[r'\\nabla']:\n\t\t\t\telement1, used_indices = nabla_calculation(element, used_indices, count)\n\t\t\t\telement.replace(element1)\n\treturn ex"
		},
		{
			"cell_id": 14824847296154798534,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 1358030564229563658,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 18299316068905843440,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})"
						}
					],
					"source": "\\begin{dmath*}{}G_{4X} \\left( - \\frac{1}{2}{\\Box^{(4)}{\\pi}}^{2} h_{a b}+\\frac{1}{2}h_{a b} \\pi^{\\mu \\nu}\\pi_{\\mu \\nu}-2\\nabla_{a}\\left(\\nabla_{c}{\\pi}\\right) \\nabla_{b}\\left(\\nabla_{d}{\\pi}\\right) h^{c d} - \\frac{1}{2}F_{a c} F_{b d} \\nabla_{e}{\\pi} \\nabla_{f}{\\pi} {f}^{2} h^{c e} h^{d f}-2\\nabla_{a}{f} \\nabla_{c}{f} \\nabla_{b}{\\pi} \\nabla_{d}{\\pi} {f}^{-2} h^{c d}+F_{a c} F_{d e} \\nabla_{b}{\\pi} \\nabla_{f}{\\pi} {f}^{2} h^{c d} h^{e f}\\right)\\end{dmath*}"
				}
			],
			"source": "#ex := G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f});"
		},
		{
			"cell_id": 294443715094091097,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 9272222325136358374,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 10657699622890268018,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2(\\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)) (\\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\partial_{e}(p) \\partial_{f}(p) (f)**2 h^{c e} h^{d f}-2\\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p) \\partial_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\partial_{b}(p) \\partial_{f}(p) (f)**2 h^{c d} h^{e f})"
						}
					],
					"source": "\\begin{dmath*}{}G_{4X} \\left( - \\frac{1}{2}{\\Box^{(4)}{\\pi}}^{2} h_{a b}+\\frac{1}{2}h_{a b} \\pi^{\\mu \\nu}\\pi_{\\mu \\nu}-2\\left(\\partial_{a}\\left(\\partial_{c}{\\pi}\\right)-G^{y}\\,_{a c} \\partial_{y}{\\pi}\\right) \\left(\\partial_{b}\\left(\\partial_{d}{\\pi}\\right)-G^{w}\\,_{b d} \\partial_{w}{\\pi}\\right) h^{c d} - \\frac{1}{2}F_{a c} F_{b d} \\partial_{e}{\\pi} \\partial_{f}{\\pi} {f}^{2} h^{c e} h^{d f}-2\\partial_{a}{f} \\partial_{c}{f} \\partial_{b}{\\pi} \\partial_{d}{\\pi} {f}^{-2} h^{c d}+F_{a c} F_{d e} \\partial_{b}{\\pi} \\partial_{f}{\\pi} {f}^{2} h^{c d} h^{e f}\\right)\\end{dmath*}"
				},
				{
					"cell_id": 3248920788418619145,
					"cell_origin": "server",
					"cell_type": "output",
					"source": "\\begin{verbatim}I am in nabla calculation  G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})\nlocal count of G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})  12\nmult is  G4X\nlocal count of G4X  0\nThere is no nabla, mult is  G4X\nmult is  ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})\nlocal count of ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})  12\nThat crap needs another circle\nI am in nabla calculation  ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}-2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f})\nlocal count of  -  1/2 (boxpi4)**2 h_{a b}  0\nThere is no nabla in this element  -  1/2 (boxpi4)**2 h_{a b}\nlocal count of  1/2 h_{a b} pi24  0\nThere is no nabla in this element  1/2 h_{a b} pi24\nlocal count of -2\\nabla_{a}(\\nabla_{c}(p)) \\nabla_{b}(\\nabla_{d}(p)) h^{c d}  4\nmult is  \\nabla_{a}(\\nabla_{c}(p))\nlocal count of \\nabla_{a}(\\nabla_{c}(p))  2\nThat crap needs another circle\nI am in nabla calculation  \\nabla_{a}(\\nabla_{c}(p))\nlocal count of \\nabla_{a}(\\nabla_{c}(p))  2\n\\nabla_{a}(\\nabla_{c}(p))\nThere was not any multiplication, but I still need another circle\nI am in nabla calculation  \\nabla_{c}(p)\nlocal count of \\nabla_{c}(p)  1\nThere was one nabla in this element. I have unwraped it and I have got \\partial_{c}(p)\nIt is the end of nabla_calculation, I have got  \\partial_{c}(p)\nI get out of the recurtion step and I bring \\nabla_{a}(\\partial_{c}(p)) from that.\nI unwraped last nabla here and I got \\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)\nIt is the end of nabla_calculation, I have got  \\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)\nI get out of the recurtion step and I bring \\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p) from that.\nmult is  \\nabla_{b}(\\nabla_{d}(p))\nlocal count of \\nabla_{b}(\\nabla_{d}(p))  2\nThat crap needs another circle\nI am in nabla calculation  \\nabla_{b}(\\nabla_{d}(p))\nlocal count of \\nabla_{b}(\\nabla_{d}(p))  2\n\\nabla_{b}(\\nabla_{d}(p))\nThere was not any multiplication, but I still need another circle\nI am in nabla calculation  \\nabla_{d}(p)\nlocal count of \\nabla_{d}(p)  1\nThere was one nabla in this element. I have unwraped it and I have got \\partial_{d}(p)\nIt is the end of nabla_calculation, I have got  \\partial_{d}(p)\nI get out of the recurtion step and I bring \\nabla_{b}(\\partial_{d}(p)) from that.\nI unwraped last nabla here and I got \\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)\nIt is the end of nabla_calculation, I have got  \\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)\nI get out of the recurtion step and I bring (\\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)) (\\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)) from that.\nmult is  h^{c d}\nlocal count of h^{c d}  0\nThere is no nabla, mult is  h^{c d}\nlocal count of  -  1/2 F_{a c} F_{b d} \\nabla_{e}(p) \\nabla_{f}(p) (f)**2 h^{c e} h^{d f}  2\nmult is  F_{a c}\nlocal count of F_{a c}  0\nThere is no nabla, mult is  F_{a c}\nmult is  F_{b d}\nlocal count of F_{b d}  0\nThere is no nabla, mult is  F_{b d}\nmult is  \\nabla_{e}(p)\nlocal count of \\nabla_{e}(p)  1\nI unwraped one nabla \\partial_{e}(p)\nI unwraped one nabla in product and now i have F_{a c} F_{b d} \\partial_{e}(p)\nmult is  \\nabla_{f}(p)\nlocal count of \\nabla_{f}(p)  1\nI unwraped one nabla \\partial_{f}(p)\nI unwraped one nabla in product and now i have F_{a c} F_{b d} \\partial_{e}(p) \\partial_{f}(p)\nmult is  (f)**2\nlocal count of (f)**2  0\nThere is no nabla, mult is  (f)**2\nmult is  h^{c e}\nlocal count of h^{c e}  0\nThere is no nabla, mult is  h^{c e}\nmult is  h^{d f}\nlocal count of h^{d f}  0\nThere is no nabla, mult is  h^{d f}\nlocal count of -2\\nabla_{a}(f) \\nabla_{c}(f) \\nabla_{b}(p) \\nabla_{d}(p) (f)**(-2) h^{c d}  4\nmult is  \\nabla_{a}(f)\nlocal count of \\nabla_{a}(f)  1\nI unwraped one nabla \\partial_{a}(f)\nI unwraped one nabla in product and now i have \\partial_{a}(f)\nmult is  \\nabla_{c}(f)\nlocal count of \\nabla_{c}(f)  1\nI unwraped one nabla \\partial_{c}(f)\nI unwraped one nabla in product and now i have \\partial_{a}(f) \\partial_{c}(f)\nmult is  \\nabla_{b}(p)\nlocal count of \\nabla_{b}(p)  1\nI unwraped one nabla \\partial_{b}(p)\nI unwraped one nabla in product and now i have \\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p)\nmult is  \\nabla_{d}(p)\nlocal count of \\nabla_{d}(p)  1\nI unwraped one nabla \\partial_{d}(p)\nI unwraped one nabla in product and now i have \\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p) \\partial_{d}(p)\nmult is  (f)**(-2)\nlocal count of (f)**(-2)  0\nThere is no nabla, mult is  (f)**(-2)\nmult is  h^{c d}\nlocal count of h^{c d}  0\nThere is no nabla, mult is  h^{c d}\nlocal count of F_{a c} F_{d e} \\nabla_{b}(p) \\nabla_{f}(p) (f)**2 h^{c d} h^{e f}  2\nmult is  F_{a c}\nlocal count of F_{a c}  0\nThere is no nabla, mult is  F_{a c}\nmult is  F_{d e}\nlocal count of F_{d e}  0\nThere is no nabla, mult is  F_{d e}\nmult is  \\nabla_{b}(p)\nlocal count of \\nabla_{b}(p)  1\nI unwraped one nabla \\partial_{b}(p)\nI unwraped one nabla in product and now i have F_{a c} F_{d e} \\partial_{b}(p)\nmult is  \\nabla_{f}(p)\nlocal count of \\nabla_{f}(p)  1\nI unwraped one nabla \\partial_{f}(p)\nI unwraped one nabla in product and now i have F_{a c} F_{d e} \\partial_{b}(p) \\partial_{f}(p)\nmult is  (f)**2\nlocal count of (f)**2  0\nThere is no nabla, mult is  (f)**2\nmult is  h^{c d}\nlocal count of h^{c d}  0\nThere is no nabla, mult is  h^{c d}\nmult is  h^{e f}\nlocal count of h^{e f}  0\nThere is no nabla, mult is  h^{e f}\nIt is the end of nabla_calculation, I have got   -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2(\\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)) (\\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\partial_{e}(p) \\partial_{f}(p) (f)**2 h^{c e} h^{d f}-2\\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p) \\partial_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\partial_{b}(p) \\partial_{f}(p) (f)**2 h^{c d} h^{e f}\nI get out of the recurtion step and I bring G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2(\\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)) (\\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\partial_{e}(p) \\partial_{f}(p) (f)**2 h^{c e} h^{d f}-2\\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p) \\partial_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\partial_{b}(p) \\partial_{f}(p) (f)**2 h^{c d} h^{e f}) from that.\nIt is the end of nabla_calculation, I have got  G4X ( -  1/2 (boxpi4)**2 h_{a b} +  1/2 h_{a b} pi24-2(\\partial_{a}(\\partial_{c}(p))-G^{y}_{a c} \\partial_{y}(p)) (\\partial_{b}(\\partial_{d}(p))-G^{w}_{b d} \\partial_{w}(p)) h^{c d} -  1/2 F_{a c} F_{b d} \\partial_{e}(p) \\partial_{f}(p) (f)**2 h^{c e} h^{d f}-2\\partial_{a}(f) \\partial_{c}(f) \\partial_{b}(p) \\partial_{d}(p) (f)**(-2) h^{c d} + F_{a c} F_{d e} \\partial_{b}(p) \\partial_{f}(p) (f)**2 h^{c d} h^{e f})\n\\end{verbatim}"
				}
			],
			"source": "#ex = expand_nabla($@[ex]$);"
		},
		{
			"cell_id": 6202135451276414406,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def kaluza(ex):\n\tsubstitute(ex, $g_{4 4} -> \\phi**{2}$ )\n\tsubstitute(ex, $g_{m 4} -> \\phi**{2} A_{m}$ )\n\tsubstitute(ex, $g_{4 m} -> \\phi**{2} A_{m}$ )\n\tsubstitute(ex, $g_{m n} -> h_{m n} + \\phi**{2} A_{m} A_{n}$ )\n\tsubstitute(ex, $g^{4 4} -> \\phi**{-2} +  A_{m} h^{m n} A_{n}$ )\n\tsubstitute(ex, $g^{m 4} -> - h^{m n} A_{n}$ )\n\tsubstitute(ex, $g^{4 m} -> - h^{m n} A_{n}$ )\n\tsubstitute(ex, $g^{m n} -> h^{m n}$ )\n\treturn ex"
		},
		{
			"cell_id": 4073406499368588177,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def writing(ex):\n\twith open(\"output\", \"a\") as file:\n   \t\tfile.write(\"\\n\" + ex.input_form() + \"\\n\")"
		},
		{
			"cell_id": 5565772250685938253,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		},
		{
			"cell_id": 9416668459505161059,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 1085485308500691188,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 2242191625055172877,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "R = R3-2h^{m n} \\nabla_{n}(p) \\nabla_{m}(p)"
						}
					],
					"source": "\\begin{dmath*}{}R = {R_{3}}-2h^{m n} \\nabla_{n}{p} \\nabla_{m}{p}\\end{dmath*}"
				}
			],
			"source": "ex:= R = R3 -2h^{m n}\\nabla_{n}{p}\\nabla_{m}{p};"
		},
		{
			"cell_id": 5566069842548106541,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 8599383313812260926,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 12874059246463349646,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "R = R3-2h^{m n} \\partial_{n}(p) \\partial_{m}(p)"
						}
					],
					"source": "\\begin{dmath*}{}R = {R_{3}}-2h^{m n} \\partial_{n}{p} \\partial_{m}{p}\\end{dmath*}"
				},
				{
					"cell_id": 16634425576683696353,
					"cell_origin": "server",
					"cell_type": "output",
					"source": "\\begin{verbatim}-2h^{m n} \\nabla_{n}(p) \\nabla_{m}(p)\nh^{m n} \\partial_{n}(p) \\partial_{m}(p)\n\\end{verbatim}"
				}
			],
			"source": "expand_nabla((ex));"
		},
		{
			"cell_id": 6055736795153524072,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"version": 1.0
}
